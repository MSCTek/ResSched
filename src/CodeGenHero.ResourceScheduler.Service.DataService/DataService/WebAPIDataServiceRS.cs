// <auto-generated> - Template:WebApiDataService, Version:1.1, Id:424e7ec7-bd9d-4cd3-9257-6ffbc772b82e
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CodeGenHero.Logging;
using CodeGenHero.DataService;
using CodeGenHero.ResourceScheduler.API.Client.Interface;
using xDTO = CodeGenHero.ResourceScheduler.DTO.RS;

namespace CodeGenHero.ResourceScheduler.API.Client
{
	public partial class WebApiDataServiceRS : WebApiDataServiceBase, IWebApiDataServiceRS
	{
		public WebApiDataServiceRS(ILoggingService log, IWebApiExecutionContext context) : base(log, context)
		{ }

		private WebApiDataServiceRS() : base()
		{ }


		#region GetAllPages

		public async Task<IList<xDTO.Resource>> GetAllPagesResourcesAsync(
			DateTime? minUpdatedDate = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetResourcesAsync);
		}

		public async Task<IList<xDTO.ResourceSchedule>> GetAllPagesResourceSchedulesAsync(
			DateTime? minUpdatedDate = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetResourceSchedulesAsync);
		}

		public async Task<IList<xDTO.User>> GetAllPagesUsersAsync(
			DateTime? minUpdatedDate = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetUsersAsync);
		}

		#endregion GetAllPages



		#region GetOnePage

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Resource>>>> GetResourcesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Resource>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Resources", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Resource>>>> GetResourcesAsync(
			DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetResourcesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ResourceSchedule>>>> GetResourceSchedulesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.ResourceSchedule>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}ResourceSchedules", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ResourceSchedule>>>> GetResourceSchedulesAsync(
			DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetResourceSchedulesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.User>>>> GetUsersAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.User>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Users", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.User>>>> GetUsersAsync(
			DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetUsersAsync(pageDataRequest);
		}

		#endregion GetOnePage



		#region Get By PK

		public async Task<IHttpCallResultCGHT<xDTO.Resource>> GetResourceAsync(System.Guid id, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Resource>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Resources/{id}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ResourceSchedule>> GetResourceScheduleAsync(System.Guid id, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.ResourceSchedule>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}ResourceSchedules/{id}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.User>> GetUserAsync(System.Guid id, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.User>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Users/{id}?numChildLevels={numChildLevels}");
			return retVal;
		}

		#endregion Get By PK



		#region Create

			public async Task<IHttpCallResultCGHT<xDTO.Resource>> CreateResourceAsync(xDTO.Resource item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Resource>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Resources/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.ResourceSchedule>> CreateResourceScheduleAsync(xDTO.ResourceSchedule item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.ResourceSchedule>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}ResourceSchedules/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.User>> CreateUserAsync(xDTO.User item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.User>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Users/", item);
				return retVal;
			}

		#endregion Create



		#region Update

			public async Task<IHttpCallResultCGHT<xDTO.Resource>> UpdateResourceAsync(xDTO.Resource item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Resource>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Resources/{item.Id}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.ResourceSchedule>> UpdateResourceScheduleAsync(xDTO.ResourceSchedule item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.ResourceSchedule>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}ResourceSchedules/{item.Id}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.User>> UpdateUserAsync(xDTO.User item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.User>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Users/{item.Id}", item);
				return retVal;
			}

		#endregion Update



		#region Delete

		public async Task<IHttpCallResultCGHT<xDTO.Resource>> DeleteResourceAsync(System.Guid id)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Resource>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Resources/{id}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ResourceSchedule>> DeleteResourceScheduleAsync(System.Guid id)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.ResourceSchedule>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}ResourceSchedules/{id}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.User>> DeleteUserAsync(System.Guid id)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.User>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Users/{id}");
			return retVal;
		}

		#endregion Delete


	}
}
