// <auto-generated> - Template:WebApiDataServiceInterface, Version:1.1, Id:1ea810ed-61a7-443b-97f2-da5b30311e75
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CodeGenHero.DataService;
using xDTO = CodeGenHero.ResourceScheduler.DTO.RS;

namespace CodeGenHero.ResourceScheduler.API.Client.Interface
{
	public partial interface IWebApiDataServiceRS : IWebApiDataServiceBase
	{
		#region GetAllPages

		Task<IList<xDTO.Resource>> GetAllPagesResourcesAsync(DateTime? minUpdatedDate = null, string sort = null);

		Task<IList<xDTO.ResourceSchedule>> GetAllPagesResourceSchedulesAsync(DateTime? minUpdatedDate = null, string sort = null);

		Task<IList<xDTO.User>> GetAllPagesUsersAsync(DateTime? minUpdatedDate = null, string sort = null);


		#endregion GetAllPages


		#region GetPageData

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Resource>>>> GetResourcesAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Resource>>>> GetResourcesAsync(DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ResourceSchedule>>>> GetResourceSchedulesAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ResourceSchedule>>>> GetResourceSchedulesAsync(DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.User>>>> GetUsersAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.User>>>> GetUsersAsync(DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100);


		#endregion GetPageData


		#region Get By PK

		Task<IHttpCallResultCGHT<xDTO.Resource>> GetResourceAsync(System.Guid id, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.ResourceSchedule>> GetResourceScheduleAsync(System.Guid id, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.User>> GetUserAsync(System.Guid id, int numChildLevels);


		#endregion Get By PK


		#region Create

		Task<IHttpCallResultCGHT<xDTO.Resource>> CreateResourceAsync(xDTO.Resource item);

		Task<IHttpCallResultCGHT<xDTO.ResourceSchedule>> CreateResourceScheduleAsync(xDTO.ResourceSchedule item);

		Task<IHttpCallResultCGHT<xDTO.User>> CreateUserAsync(xDTO.User item);


		#endregion Create


		#region Update

		Task<IHttpCallResultCGHT<xDTO.Resource>> UpdateResourceAsync(xDTO.Resource item);

		Task<IHttpCallResultCGHT<xDTO.ResourceSchedule>> UpdateResourceScheduleAsync(xDTO.ResourceSchedule item);

		Task<IHttpCallResultCGHT<xDTO.User>> UpdateUserAsync(xDTO.User item);


		#endregion Update


		#region Delete

		Task<IHttpCallResultCGHT<xDTO.Resource>> DeleteResourceAsync(System.Guid id);

		Task<IHttpCallResultCGHT<xDTO.ResourceSchedule>> DeleteResourceScheduleAsync(System.Guid id);

		Task<IHttpCallResultCGHT<xDTO.User>> DeleteUserAsync(System.Guid id);


		#endregion Delete


	}
}
